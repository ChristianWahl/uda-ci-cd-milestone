version: 2.1

orbs:
  # Note: In 4.1.2 orb notifications don't work
  slack: circleci/slack@4.1.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --region=eu-central-1 --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --region=eu-central-1 --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`curl -H "token: 33cdc5e5-44d8-4f57-9a91-c86092465710" \
                      --request GET https://api.memstash.io/values/migration_result_${CIRCLE_WORKFLOW_ID:0:7}`
            if [[ "$SUCCESS" == "1" ]];
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend/
            npm install
            npm run build:prod
      - save_cache:
          paths:
            - frontend/node_modules
            - frontend/dist
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend/
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
            - backend/dist
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend/
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend/
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend/
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend/
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip jq
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Get back-end ip and send it to MemStash
          command: |
            BACKEND_IP=(`aws ec2 describe-instances \
              --region=eu-central-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text`)
            curl -H "Content-Type: text/plain" -H "token: 33cdc5e5-44d8-4f57-9a91-c86092465710" \
              --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/backend_ip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --region=eu-central-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: /root/project
          paths:
            - .circleci/ansible/inventory.txt
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=v \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible git curl jq
            pip3 install --upgrade pip
            pip3 install awscli
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - add_ssh_keys:
          fingerprints:
            - "85:2e:9b:1e:bb:d9:34:0f:ba:9a:05:a7:d3:21:0f:ce"
      - run:
          name: Configure server
          command: |
            cat /tmp/workspace/.circleci/ansible/inventory.txt
            ansible-playbook -i /tmp/workspace/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y python3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Set env variables
          command: |
            echo "ENVIRONMENT=production" > backend/.env
            echo "NODE_ENV=production" >> backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> backend/.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend/
            npm run migrations > /tmp/migrations.log
            date >> /tmp/migrations.log
            migrations_done=(`grep "has been executed successfully" /tmp/migrations.log || true`)
            [ ${#migrations_done} -gt 0 ] \
              && curl -H "Content-Type: text/plain" \
              -H "token: 33cdc5e5-44d8-4f57-9a91-c86092465710" \
              --request PUT --data 1 https://api.memstash.io/values/migration_result_${CIRCLE_WORKFLOW_ID:0:7} \
              || true
      - destroy-environment
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y python3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=(`curl -H "token: 33cdc5e5-44d8-4f57-9a91-c86092465710" \
              --request GET https://api.memstash.io/values/backend_ip`)
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend/
            aws s3 cp ./dist/ s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y python3-pip ansible git curl tar gzip jq
            pip3 install --upgrade pip
            pip3 install awscli
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "85:2e:9b:1e:bb:d9:34:0f:ba:9a:05:a7:d3:21:0f:ce"
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Compress backend
          command: |
            tar cvzf /tmp/backend.tar.gz backend/
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i /tmp/workspace/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1
  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y python3-pip ansible git curl
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`curl -H "token: 33cdc5e5-44d8-4f57-9a91-c86092465710" \
               --request GET https://api.memstash.io/values/backend_ip`
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=`curl -H "token: 33cdc5e5-44d8-4f57-9a91-c86092465710" \
                           --request GET https://api.memstash.io/values/backend_ip`
            export API_URL="http://${BACKEND_IP}:3030"
            curl "${API_URL}/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/"
            if curl -s ${URL} | grep "NotWelcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name "udapeople-stack" \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          template: basic_fail_1

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]
